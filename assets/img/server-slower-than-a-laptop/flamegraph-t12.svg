<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="213508"><g><title>[unknown] (98 samples, 0.05%)</title><rect x="0.0052%" y="389" width="0.0459%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="98"/><text x="0.2552%" y="399.50"></text></g><g><title>[unknown] (43 samples, 0.02%)</title><rect x="0.0309%" y="373" width="0.0201%" height="15" fill="rgb(217,0,24)" fg:x="66" fg:w="43"/><text x="0.2809%" y="383.50"></text></g><g><title>[unknown] (40 samples, 0.02%)</title><rect x="0.0323%" y="357" width="0.0187%" height="15" fill="rgb(221,193,54)" fg:x="69" fg:w="40"/><text x="0.2823%" y="367.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="0.0356%" y="341" width="0.0155%" height="15" fill="rgb(248,212,6)" fg:x="76" fg:w="33"/><text x="0.2856%" y="351.50"></text></g><g><title>[unknown] (29 samples, 0.01%)</title><rect x="0.0375%" y="325" width="0.0136%" height="15" fill="rgb(208,68,35)" fg:x="80" fg:w="29"/><text x="0.2875%" y="335.50"></text></g><g><title>[unknown] (29 samples, 0.01%)</title><rect x="0.0375%" y="309" width="0.0136%" height="15" fill="rgb(232,128,0)" fg:x="80" fg:w="29"/><text x="0.2875%" y="319.50"></text></g><g><title>[unknown] (29 samples, 0.01%)</title><rect x="0.0375%" y="293" width="0.0136%" height="15" fill="rgb(207,160,47)" fg:x="80" fg:w="29"/><text x="0.2875%" y="303.50"></text></g><g><title>[unknown] (29 samples, 0.01%)</title><rect x="0.0375%" y="277" width="0.0136%" height="15" fill="rgb(228,23,34)" fg:x="80" fg:w="29"/><text x="0.2875%" y="287.50"></text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="0.0379%" y="261" width="0.0131%" height="15" fill="rgb(218,30,26)" fg:x="81" fg:w="28"/><text x="0.2879%" y="271.50"></text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="0.0379%" y="245" width="0.0131%" height="15" fill="rgb(220,122,19)" fg:x="81" fg:w="28"/><text x="0.2879%" y="255.50"></text></g><g><title>&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (35 samples, 0.02%)</title><rect x="0.0585%" y="261" width="0.0164%" height="15" fill="rgb(250,228,42)" fg:x="125" fg:w="35"/><text x="0.3085%" y="271.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (48 samples, 0.02%)</title><rect x="0.0562%" y="293" width="0.0225%" height="15" fill="rgb(240,193,28)" fg:x="120" fg:w="48"/><text x="0.3062%" y="303.50"></text></g><g><title>core::fmt::write (44 samples, 0.02%)</title><rect x="0.0581%" y="277" width="0.0206%" height="15" fill="rgb(216,20,37)" fg:x="124" fg:w="44"/><text x="0.3081%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (63 samples, 0.03%)</title><rect x="0.0515%" y="357" width="0.0295%" height="15" fill="rgb(206,188,39)" fg:x="110" fg:w="63"/><text x="0.3015%" y="367.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (62 samples, 0.03%)</title><rect x="0.0520%" y="341" width="0.0290%" height="15" fill="rgb(217,207,13)" fg:x="111" fg:w="62"/><text x="0.3020%" y="351.50"></text></g><g><title>status_line::redraw (59 samples, 0.03%)</title><rect x="0.0534%" y="325" width="0.0276%" height="15" fill="rgb(231,73,38)" fg:x="114" fg:w="59"/><text x="0.3034%" y="335.50"></text></g><g><title>core::fmt::write (53 samples, 0.02%)</title><rect x="0.0562%" y="309" width="0.0248%" height="15" fill="rgb(225,20,46)" fg:x="120" fg:w="53"/><text x="0.3062%" y="319.50"></text></g><g><title>__clone (165 samples, 0.08%)</title><rect x="0.0052%" y="405" width="0.0773%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="165"/><text x="0.2552%" y="415.50"></text></g><g><title>start_thread (67 samples, 0.03%)</title><rect x="0.0511%" y="389" width="0.0314%" height="15" fill="rgb(221,200,47)" fg:x="109" fg:w="67"/><text x="0.3011%" y="399.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (66 samples, 0.03%)</title><rect x="0.0515%" y="373" width="0.0309%" height="15" fill="rgb(226,26,5)" fg:x="110" fg:w="66"/><text x="0.3015%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (33 samples, 0.02%)</title><rect x="0.0890%" y="389" width="0.0155%" height="15" fill="rgb(249,33,26)" fg:x="190" fg:w="33"/><text x="0.3390%" y="399.50"></text></g><g><title>syscall (33 samples, 0.02%)</title><rect x="0.0890%" y="373" width="0.0155%" height="15" fill="rgb(235,183,28)" fg:x="190" fg:w="33"/><text x="0.3390%" y="383.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="0.0890%" y="357" width="0.0155%" height="15" fill="rgb(221,5,38)" fg:x="190" fg:w="33"/><text x="0.3390%" y="367.50"></text></g><g><title>latte::main (41 samples, 0.02%)</title><rect x="0.0857%" y="405" width="0.0192%" height="15" fill="rgb(247,18,42)" fg:x="183" fg:w="41"/><text x="0.3357%" y="415.50"></text></g><g><title>latte (256 samples, 0.12%)</title><rect x="0.0005%" y="421" width="0.1199%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="256"/><text x="0.2505%" y="431.50"></text></g><g><title>latte::run::_{{closure}} (33 samples, 0.02%)</title><rect x="0.1049%" y="405" width="0.0155%" height="15" fill="rgb(249,31,29)" fg:x="224" fg:w="33"/><text x="0.3549%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33 samples, 0.02%)</title><rect x="0.1049%" y="389" width="0.0155%" height="15" fill="rgb(225,111,53)" fg:x="224" fg:w="33"/><text x="0.3549%" y="399.50"></text></g><g><title>[libc-2.23.so] (62 samples, 0.03%)</title><rect x="0.1419%" y="389" width="0.0290%" height="15" fill="rgb(238,160,17)" fg:x="303" fg:w="62"/><text x="0.3919%" y="399.50"></text></g><g><title>[unknown] (62 samples, 0.03%)</title><rect x="0.1419%" y="373" width="0.0290%" height="15" fill="rgb(214,148,48)" fg:x="303" fg:w="62"/><text x="0.3919%" y="383.50"></text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="0.1578%" y="357" width="0.0131%" height="15" fill="rgb(232,36,49)" fg:x="337" fg:w="28"/><text x="0.4078%" y="367.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="0.1583%" y="341" width="0.0126%" height="15" fill="rgb(209,103,24)" fg:x="338" fg:w="27"/><text x="0.4083%" y="351.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="0.1592%" y="325" width="0.0117%" height="15" fill="rgb(229,88,8)" fg:x="340" fg:w="25"/><text x="0.4092%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (120 samples, 0.06%)</title><rect x="0.1260%" y="405" width="0.0562%" height="15" fill="rgb(213,181,19)" fg:x="269" fg:w="120"/><text x="0.3760%" y="415.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (49 samples, 0.02%)</title><rect x="0.1906%" y="389" width="0.0229%" height="15" fill="rgb(254,191,54)" fg:x="407" fg:w="49"/><text x="0.4406%" y="399.50"></text></g><g><title>[latte] (70 samples, 0.03%)</title><rect x="0.1836%" y="405" width="0.0328%" height="15" fill="rgb(241,83,37)" fg:x="392" fg:w="70"/><text x="0.4336%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (244 samples, 0.11%)</title><rect x="0.2496%" y="389" width="0.1143%" height="15" fill="rgb(233,36,39)" fg:x="533" fg:w="244"/><text x="0.4996%" y="399.50"></text></g><g><title>&lt;rune::runtime::value::Value as core::clone::Clone&gt;::clone (59 samples, 0.03%)</title><rect x="0.3639%" y="389" width="0.0276%" height="15" fill="rgb(226,3,54)" fg:x="777" fg:w="59"/><text x="0.6139%" y="399.50"></text></g><g><title>&lt;rune::shared::assert_send::AssertSend&lt;T&gt; as core::future::future::Future&gt;::poll (97 samples, 0.05%)</title><rect x="0.3916%" y="389" width="0.0454%" height="15" fill="rgb(245,192,40)" fg:x="836" fg:w="97"/><text x="0.6416%" y="399.50"></text></g><g><title>[libc-2.23.so] (29 samples, 0.01%)</title><rect x="0.4459%" y="389" width="0.0136%" height="15" fill="rgb(238,167,29)" fg:x="952" fg:w="29"/><text x="0.6959%" y="399.50"></text></g><g><title>__clock_gettime (46 samples, 0.02%)</title><rect x="0.4670%" y="389" width="0.0215%" height="15" fill="rgb(232,182,51)" fg:x="997" fg:w="46"/><text x="0.7170%" y="399.50"></text></g><g><title>__vdso_clock_gettime (26 samples, 0.01%)</title><rect x="0.4885%" y="389" width="0.0122%" height="15" fill="rgb(231,60,39)" fg:x="1043" fg:w="26"/><text x="0.7385%" y="399.50"></text></g><g><title>_rjem_sdallocx (27 samples, 0.01%)</title><rect x="0.5012%" y="389" width="0.0126%" height="15" fill="rgb(208,69,12)" fg:x="1070" fg:w="27"/><text x="0.7512%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (46 samples, 0.02%)</title><rect x="0.5138%" y="389" width="0.0215%" height="15" fill="rgb(235,93,37)" fg:x="1097" fg:w="46"/><text x="0.7638%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.01%)</title><rect x="0.5353%" y="389" width="0.0122%" height="15" fill="rgb(213,116,39)" fg:x="1143" fg:w="26"/><text x="0.7853%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;latte::Snapshotter::iteration_completed::{{closure}}&gt;&gt; (25 samples, 0.01%)</title><rect x="0.5475%" y="389" width="0.0117%" height="15" fill="rgb(222,207,29)" fg:x="1169" fg:w="25"/><text x="0.7975%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;rune::runtime::value::Value&gt; (263 samples, 0.12%)</title><rect x="0.5592%" y="389" width="0.1232%" height="15" fill="rgb(206,96,30)" fg:x="1194" fg:w="263"/><text x="0.8092%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;rune::runtime::vm_error::VmErrorKind&gt; (85 samples, 0.04%)</title><rect x="0.6824%" y="389" width="0.0398%" height="15" fill="rgb(218,138,4)" fg:x="1457" fg:w="85"/><text x="0.9324%" y="399.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (88 samples, 0.04%)</title><rect x="0.7222%" y="389" width="0.0412%" height="15" fill="rgb(250,191,14)" fg:x="1542" fg:w="88"/><text x="0.9722%" y="399.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (49 samples, 0.02%)</title><rect x="0.7634%" y="389" width="0.0229%" height="15" fill="rgb(239,60,40)" fg:x="1630" fg:w="49"/><text x="1.0134%" y="399.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (48 samples, 0.02%)</title><rect x="0.7864%" y="389" width="0.0225%" height="15" fill="rgb(206,27,48)" fg:x="1679" fg:w="48"/><text x="1.0364%" y="399.50"></text></g><g><title>latte::workload::Program::convert_error (57 samples, 0.03%)</title><rect x="0.8093%" y="389" width="0.0267%" height="15" fill="rgb(225,35,8)" fg:x="1728" fg:w="57"/><text x="1.0593%" y="399.50"></text></g><g><title>rune::runtime::budget::take (64 samples, 0.03%)</title><rect x="0.8398%" y="389" width="0.0300%" height="15" fill="rgb(250,213,24)" fg:x="1793" fg:w="64"/><text x="1.0898%" y="399.50"></text></g><g><title>rune::runtime::vm::Vm::run (153 samples, 0.07%)</title><rect x="0.8698%" y="389" width="0.0717%" height="15" fill="rgb(247,123,22)" fg:x="1857" fg:w="153"/><text x="1.1198%" y="399.50"></text></g><g><title>rune::runtime::vm::Vm::set_entrypoint (42 samples, 0.02%)</title><rect x="0.9414%" y="389" width="0.0197%" height="15" fill="rgb(231,138,38)" fg:x="2010" fg:w="42"/><text x="1.1914%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (42 samples, 0.02%)</title><rect x="0.9611%" y="389" width="0.0197%" height="15" fill="rgb(231,145,46)" fg:x="2052" fg:w="42"/><text x="1.2111%" y="399.50"></text></g><g><title>[unknown] (1,633 samples, 0.76%)</title><rect x="0.2187%" y="405" width="0.7648%" height="15" fill="rgb(251,118,11)" fg:x="467" fg:w="1633"/><text x="0.4687%" y="415.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (54 samples, 0.03%)</title><rect x="0.9948%" y="325" width="0.0253%" height="15" fill="rgb(217,147,25)" fg:x="2124" fg:w="54"/><text x="1.2448%" y="335.50"></text></g><g><title>syscall (49 samples, 0.02%)</title><rect x="0.9972%" y="309" width="0.0229%" height="15" fill="rgb(247,81,37)" fg:x="2129" fg:w="49"/><text x="1.2472%" y="319.50"></text></g><g><title>[unknown] (49 samples, 0.02%)</title><rect x="0.9972%" y="293" width="0.0229%" height="15" fill="rgb(209,12,38)" fg:x="2129" fg:w="49"/><text x="1.2472%" y="303.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="1.0089%" y="277" width="0.0112%" height="15" fill="rgb(227,1,9)" fg:x="2154" fg:w="24"/><text x="1.2589%" y="287.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="1.0089%" y="261" width="0.0112%" height="15" fill="rgb(248,47,43)" fg:x="2154" fg:w="24"/><text x="1.2589%" y="271.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (73 samples, 0.03%)</title><rect x="1.0210%" y="309" width="0.0342%" height="15" fill="rgb(221,10,30)" fg:x="2180" fg:w="73"/><text x="1.2710%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (65 samples, 0.03%)</title><rect x="1.0248%" y="293" width="0.0304%" height="15" fill="rgb(210,229,1)" fg:x="2188" fg:w="65"/><text x="1.2748%" y="303.50"></text></g><g><title>syscall (65 samples, 0.03%)</title><rect x="1.0248%" y="277" width="0.0304%" height="15" fill="rgb(222,148,37)" fg:x="2188" fg:w="65"/><text x="1.2748%" y="287.50"></text></g><g><title>[unknown] (65 samples, 0.03%)</title><rect x="1.0248%" y="261" width="0.0304%" height="15" fill="rgb(234,67,33)" fg:x="2188" fg:w="65"/><text x="1.2748%" y="271.50"></text></g><g><title>[unknown] (35 samples, 0.02%)</title><rect x="1.0388%" y="245" width="0.0164%" height="15" fill="rgb(247,98,35)" fg:x="2218" fg:w="35"/><text x="1.2888%" y="255.50"></text></g><g><title>[unknown] (35 samples, 0.02%)</title><rect x="1.0388%" y="229" width="0.0164%" height="15" fill="rgb(247,138,52)" fg:x="2218" fg:w="35"/><text x="1.2888%" y="239.50"></text></g><g><title>[unknown] (34 samples, 0.02%)</title><rect x="1.0393%" y="213" width="0.0159%" height="15" fill="rgb(213,79,30)" fg:x="2219" fg:w="34"/><text x="1.2893%" y="223.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="1.0435%" y="197" width="0.0117%" height="15" fill="rgb(246,177,23)" fg:x="2228" fg:w="25"/><text x="1.2935%" y="207.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="1.0435%" y="181" width="0.0117%" height="15" fill="rgb(230,62,27)" fg:x="2228" fg:w="25"/><text x="1.2935%" y="191.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="1.0435%" y="165" width="0.0117%" height="15" fill="rgb(216,154,8)" fg:x="2228" fg:w="25"/><text x="1.2935%" y="175.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="1.0440%" y="149" width="0.0112%" height="15" fill="rgb(244,35,45)" fg:x="2229" fg:w="24"/><text x="1.2940%" y="159.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="1.0440%" y="133" width="0.0112%" height="15" fill="rgb(251,115,12)" fg:x="2229" fg:w="24"/><text x="1.2940%" y="143.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="1.0440%" y="117" width="0.0112%" height="15" fill="rgb(240,54,50)" fg:x="2229" fg:w="24"/><text x="1.2940%" y="127.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="1.0440%" y="101" width="0.0112%" height="15" fill="rgb(233,84,52)" fg:x="2229" fg:w="24"/><text x="1.2940%" y="111.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="1.0440%" y="85" width="0.0112%" height="15" fill="rgb(207,117,47)" fg:x="2229" fg:w="24"/><text x="1.2940%" y="95.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="1.0440%" y="69" width="0.0112%" height="15" fill="rgb(249,43,39)" fg:x="2229" fg:w="24"/><text x="1.2940%" y="79.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="1.0445%" y="53" width="0.0108%" height="15" fill="rgb(209,38,44)" fg:x="2230" fg:w="23"/><text x="1.2945%" y="63.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="1.0449%" y="37" width="0.0103%" height="15" fill="rgb(236,212,23)" fg:x="2231" fg:w="22"/><text x="1.2949%" y="47.50"></text></g><g><title>&lt;T as futures_util::fns::FnMut1&lt;A&gt;&gt;::call_mut (96 samples, 0.04%)</title><rect x="1.9868%" y="261" width="0.0450%" height="15" fill="rgb(242,79,21)" fg:x="4242" fg:w="96"/><text x="2.2368%" y="271.50"></text></g><g><title>&lt;hdrhistogram::Histogram&lt;T&gt; as core::clone::Clone&gt;::clone (44 samples, 0.02%)</title><rect x="2.1470%" y="229" width="0.0206%" height="15" fill="rgb(211,96,35)" fg:x="4584" fg:w="44"/><text x="2.3970%" y="239.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::new_with_bounds (43 samples, 0.02%)</title><rect x="2.1475%" y="213" width="0.0201%" height="15" fill="rgb(253,215,40)" fg:x="4585" fg:w="43"/><text x="2.3975%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (43 samples, 0.02%)</title><rect x="2.1475%" y="197" width="0.0201%" height="15" fill="rgb(211,81,21)" fg:x="4585" fg:w="43"/><text x="2.3975%" y="207.50"></text></g><g><title>[unknown] (43 samples, 0.02%)</title><rect x="2.1475%" y="181" width="0.0201%" height="15" fill="rgb(208,190,38)" fg:x="4585" fg:w="43"/><text x="2.3975%" y="191.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="2.1573%" y="165" width="0.0103%" height="15" fill="rgb(235,213,38)" fg:x="4606" fg:w="22"/><text x="2.4073%" y="175.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (52 samples, 0.02%)</title><rect x="2.1470%" y="245" width="0.0244%" height="15" fill="rgb(237,122,38)" fg:x="4584" fg:w="52"/><text x="2.3970%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (510 samples, 0.24%)</title><rect x="2.0318%" y="261" width="0.2389%" height="15" fill="rgb(244,218,35)" fg:x="4338" fg:w="510"/><text x="2.2818%" y="271.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (203 samples, 0.10%)</title><rect x="2.1756%" y="245" width="0.0951%" height="15" fill="rgb(240,68,47)" fg:x="4645" fg:w="203"/><text x="2.4256%" y="255.50"></text></g><g><title>[libc-2.23.so] (1,493 samples, 0.70%)</title><rect x="2.2706%" y="261" width="0.6993%" height="15" fill="rgb(210,16,53)" fg:x="4848" fg:w="1493"/><text x="2.5206%" y="271.50"></text></g><g><title>_rjem_mallocx (244 samples, 0.11%)</title><rect x="2.9699%" y="261" width="0.1143%" height="15" fill="rgb(235,124,12)" fg:x="6341" fg:w="244"/><text x="3.2199%" y="271.50"></text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="3.7708%" y="245" width="0.0131%" height="15" fill="rgb(224,169,11)" fg:x="8051" fg:w="28"/><text x="4.0208%" y="255.50"></text></g><g><title>[libc-2.23.so] (301 samples, 0.14%)</title><rect x="4.2673%" y="229" width="0.1410%" height="15" fill="rgb(250,166,2)" fg:x="9111" fg:w="301"/><text x="4.5173%" y="239.50"></text></g><g><title>_rjem_sdallocx (174 samples, 0.08%)</title><rect x="4.4097%" y="229" width="0.0815%" height="15" fill="rgb(242,216,29)" fg:x="9415" fg:w="174"/><text x="4.6597%" y="239.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (1,998 samples, 0.94%)</title><rect x="3.7839%" y="245" width="0.9358%" height="15" fill="rgb(230,116,27)" fg:x="8079" fg:w="1998"/><text x="4.0339%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (488 samples, 0.23%)</title><rect x="4.4912%" y="229" width="0.2286%" height="15" fill="rgb(228,99,48)" fg:x="9589" fg:w="488"/><text x="4.7412%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (290 samples, 0.14%)</title><rect x="4.7197%" y="245" width="0.1358%" height="15" fill="rgb(253,11,6)" fg:x="10077" fg:w="290"/><text x="4.9697%" y="255.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (4,048 samples, 1.90%)</title><rect x="3.0903%" y="261" width="1.8959%" height="15" fill="rgb(247,143,39)" fg:x="6598" fg:w="4048"/><text x="3.3403%" y="271.50">f..</text></g><g><title>tokio::runtime::task::waker::drop_waker (279 samples, 0.13%)</title><rect x="4.8556%" y="245" width="0.1307%" height="15" fill="rgb(236,97,10)" fg:x="10367" fg:w="279"/><text x="5.1056%" y="255.50"></text></g><g><title>latte::deadline::Deadline::next (43 samples, 0.02%)</title><rect x="4.9862%" y="261" width="0.0201%" height="15" fill="rgb(233,208,19)" fg:x="10646" fg:w="43"/><text x="5.2362%" y="271.50"></text></g><g><title>__clone (8,599 samples, 4.03%)</title><rect x="0.9836%" y="405" width="4.0275%" height="15" fill="rgb(216,164,2)" fg:x="2100" fg:w="8599"/><text x="1.2336%" y="415.50">__cl..</text></g><g><title>start_thread (8,599 samples, 4.03%)</title><rect x="0.9836%" y="389" width="4.0275%" height="15" fill="rgb(220,129,5)" fg:x="2100" fg:w="8599"/><text x="1.2336%" y="399.50">star..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (8,597 samples, 4.03%)</title><rect x="0.9845%" y="373" width="4.0265%" height="15" fill="rgb(242,17,10)" fg:x="2102" fg:w="8597"/><text x="1.2345%" y="383.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8,597 samples, 4.03%)</title><rect x="0.9845%" y="357" width="4.0265%" height="15" fill="rgb(242,107,0)" fg:x="2102" fg:w="8597"/><text x="1.2345%" y="367.50">core..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,583 samples, 4.02%)</title><rect x="0.9911%" y="341" width="4.0200%" height="15" fill="rgb(251,28,31)" fg:x="2116" fg:w="8583"/><text x="1.2411%" y="351.50">std:..</text></g><g><title>tokio::runtime::task::raw::poll (8,520 samples, 3.99%)</title><rect x="1.0206%" y="325" width="3.9905%" height="15" fill="rgb(233,223,10)" fg:x="2179" fg:w="8520"/><text x="1.2706%" y="335.50">toki..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (8,446 samples, 3.96%)</title><rect x="1.0552%" y="309" width="3.9558%" height="15" fill="rgb(215,21,27)" fg:x="2253" fg:w="8446"/><text x="1.3052%" y="319.50">toki..</text></g><g><title>tokio::runtime::task::raw::poll (8,444 samples, 3.95%)</title><rect x="1.0562%" y="293" width="3.9549%" height="15" fill="rgb(232,23,21)" fg:x="2255" fg:w="8444"/><text x="1.3062%" y="303.50">toki..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,444 samples, 3.95%)</title><rect x="1.0562%" y="277" width="3.9549%" height="15" fill="rgb(244,5,23)" fg:x="2255" fg:w="8444"/><text x="1.3062%" y="287.50">&lt;cor..</text></g><g><title>[unknown] (112 samples, 0.05%)</title><rect x="32.0147%" y="261" width="0.0525%" height="15" fill="rgb(226,81,46)" fg:x="68354" fg:w="112"/><text x="32.2647%" y="271.50"></text></g><g><title>[unknown] (86 samples, 0.04%)</title><rect x="32.0269%" y="245" width="0.0403%" height="15" fill="rgb(247,70,30)" fg:x="68380" fg:w="86"/><text x="32.2769%" y="255.50"></text></g><g><title>[unknown] (83 samples, 0.04%)</title><rect x="32.0283%" y="229" width="0.0389%" height="15" fill="rgb(212,68,19)" fg:x="68383" fg:w="83"/><text x="32.2783%" y="239.50"></text></g><g><title>[unknown] (83 samples, 0.04%)</title><rect x="32.0283%" y="213" width="0.0389%" height="15" fill="rgb(240,187,13)" fg:x="68383" fg:w="83"/><text x="32.2783%" y="223.50"></text></g><g><title>[unknown] (76 samples, 0.04%)</title><rect x="32.0316%" y="197" width="0.0356%" height="15" fill="rgb(223,113,26)" fg:x="68390" fg:w="76"/><text x="32.2816%" y="207.50"></text></g><g><title>[unknown] (67 samples, 0.03%)</title><rect x="32.0358%" y="181" width="0.0314%" height="15" fill="rgb(206,192,2)" fg:x="68399" fg:w="67"/><text x="32.2858%" y="191.50"></text></g><g><title>[unknown] (64 samples, 0.03%)</title><rect x="32.0372%" y="165" width="0.0300%" height="15" fill="rgb(241,108,4)" fg:x="68402" fg:w="64"/><text x="32.2872%" y="175.50"></text></g><g><title>[unknown] (55 samples, 0.03%)</title><rect x="32.0414%" y="149" width="0.0258%" height="15" fill="rgb(247,173,49)" fg:x="68411" fg:w="55"/><text x="32.2914%" y="159.50"></text></g><g><title>[unknown] (51 samples, 0.02%)</title><rect x="32.0433%" y="133" width="0.0239%" height="15" fill="rgb(224,114,35)" fg:x="68415" fg:w="51"/><text x="32.2933%" y="143.50"></text></g><g><title>[unknown] (46 samples, 0.02%)</title><rect x="32.0456%" y="117" width="0.0215%" height="15" fill="rgb(245,159,27)" fg:x="68420" fg:w="46"/><text x="32.2956%" y="127.50"></text></g><g><title>[unknown] (39 samples, 0.02%)</title><rect x="32.0489%" y="101" width="0.0183%" height="15" fill="rgb(245,172,44)" fg:x="68427" fg:w="39"/><text x="32.2989%" y="111.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="32.0545%" y="85" width="0.0126%" height="15" fill="rgb(236,23,11)" fg:x="68439" fg:w="27"/><text x="32.3045%" y="95.50"></text></g><g><title>&lt;rune::shared::assert_send::AssertSend&lt;T&gt; as core::future::future::Future&gt;::poll (57,891 samples, 27.11%)</title><rect x="5.0410%" y="277" width="27.1142%" height="15" fill="rgb(205,117,38)" fg:x="10763" fg:w="57891"/><text x="5.2910%" y="287.50">&lt;rune::shared::assert_send::AssertSend&lt;T&gt; a..</text></g><g><title>_rjem_sdallocx (188 samples, 0.09%)</title><rect x="32.0672%" y="261" width="0.0881%" height="15" fill="rgb(237,72,25)" fg:x="68466" fg:w="188"/><text x="32.3172%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (58,118 samples, 27.22%)</title><rect x="5.0382%" y="405" width="27.2205%" height="15" fill="rgb(244,70,9)" fg:x="10757" fg:w="58118"/><text x="5.2882%" y="415.50">core::ops::function::FnOnce::call_once{{vtab..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (58,118 samples, 27.22%)</title><rect x="5.0382%" y="389" width="27.2205%" height="15" fill="rgb(217,125,39)" fg:x="10757" fg:w="58118"/><text x="5.2882%" y="399.50">std::sys_common::backtrace::__rust_begin_sho..</text></g><g><title>tokio::runtime::task::raw::poll (58,118 samples, 27.22%)</title><rect x="5.0382%" y="373" width="27.2205%" height="15" fill="rgb(235,36,10)" fg:x="10757" fg:w="58118"/><text x="5.2882%" y="383.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (58,118 samples, 27.22%)</title><rect x="5.0382%" y="357" width="27.2205%" height="15" fill="rgb(251,123,47)" fg:x="10757" fg:w="58118"/><text x="5.2882%" y="367.50">tokio::runtime::thread_pool::worker::Context..</text></g><g><title>tokio::runtime::task::raw::poll (58,118 samples, 27.22%)</title><rect x="5.0382%" y="341" width="27.2205%" height="15" fill="rgb(221,13,13)" fg:x="10757" fg:w="58118"/><text x="5.2882%" y="351.50">tokio::runtime::task::raw::poll</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (58,118 samples, 27.22%)</title><rect x="5.0382%" y="325" width="27.2205%" height="15" fill="rgb(238,131,9)" fg:x="10757" fg:w="58118"/><text x="5.2882%" y="335.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (58,112 samples, 27.22%)</title><rect x="5.0410%" y="309" width="27.2177%" height="15" fill="rgb(211,50,8)" fg:x="10763" fg:w="58112"/><text x="5.2910%" y="319.50">futures_util::stream::stream::StreamExt::pol..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (58,112 samples, 27.22%)</title><rect x="5.0410%" y="293" width="27.2177%" height="15" fill="rgb(245,182,24)" fg:x="10763" fg:w="58112"/><text x="5.2910%" y="303.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; ..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (221 samples, 0.10%)</title><rect x="32.1552%" y="277" width="0.1035%" height="15" fill="rgb(242,14,37)" fg:x="68654" fg:w="221"/><text x="32.4052%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (221 samples, 0.10%)</title><rect x="32.1552%" y="261" width="0.1035%" height="15" fill="rgb(246,228,12)" fg:x="68654" fg:w="221"/><text x="32.4052%" y="271.50"></text></g><g><title>_rjem_mallocx (221 samples, 0.10%)</title><rect x="32.1552%" y="245" width="0.1035%" height="15" fill="rgb(213,55,15)" fg:x="68654" fg:w="221"/><text x="32.4052%" y="255.50"></text></g><g><title>[unknown] (100 samples, 0.05%)</title><rect x="62.4141%" y="245" width="0.0468%" height="15" fill="rgb(209,9,3)" fg:x="133259" fg:w="100"/><text x="62.6641%" y="255.50"></text></g><g><title>[unknown] (69 samples, 0.03%)</title><rect x="62.4286%" y="229" width="0.0323%" height="15" fill="rgb(230,59,30)" fg:x="133290" fg:w="69"/><text x="62.6786%" y="239.50"></text></g><g><title>[unknown] (63 samples, 0.03%)</title><rect x="62.4314%" y="213" width="0.0295%" height="15" fill="rgb(209,121,21)" fg:x="133296" fg:w="63"/><text x="62.6814%" y="223.50"></text></g><g><title>[unknown] (63 samples, 0.03%)</title><rect x="62.4314%" y="197" width="0.0295%" height="15" fill="rgb(220,109,13)" fg:x="133296" fg:w="63"/><text x="62.6814%" y="207.50"></text></g><g><title>[unknown] (58 samples, 0.03%)</title><rect x="62.4337%" y="181" width="0.0272%" height="15" fill="rgb(232,18,1)" fg:x="133301" fg:w="58"/><text x="62.6837%" y="191.50"></text></g><g><title>[unknown] (54 samples, 0.03%)</title><rect x="62.4356%" y="165" width="0.0253%" height="15" fill="rgb(215,41,42)" fg:x="133305" fg:w="54"/><text x="62.6856%" y="175.50"></text></g><g><title>[unknown] (50 samples, 0.02%)</title><rect x="62.4375%" y="149" width="0.0234%" height="15" fill="rgb(224,123,36)" fg:x="133309" fg:w="50"/><text x="62.6875%" y="159.50"></text></g><g><title>[unknown] (50 samples, 0.02%)</title><rect x="62.4375%" y="133" width="0.0234%" height="15" fill="rgb(240,125,3)" fg:x="133309" fg:w="50"/><text x="62.6875%" y="143.50"></text></g><g><title>[unknown] (43 samples, 0.02%)</title><rect x="62.4408%" y="117" width="0.0201%" height="15" fill="rgb(205,98,50)" fg:x="133316" fg:w="43"/><text x="62.6908%" y="127.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="62.4454%" y="101" width="0.0155%" height="15" fill="rgb(205,185,37)" fg:x="133326" fg:w="33"/><text x="62.6954%" y="111.50"></text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="62.4478%" y="85" width="0.0131%" height="15" fill="rgb(238,207,15)" fg:x="133331" fg:w="28"/><text x="62.6978%" y="95.50"></text></g><g><title>__clock_gettime (1,213 samples, 0.57%)</title><rect x="62.4609%" y="245" width="0.5681%" height="15" fill="rgb(213,199,42)" fg:x="133359" fg:w="1213"/><text x="62.7109%" y="255.50"></text></g><g><title>__vdso_clock_gettime (1,134 samples, 0.53%)</title><rect x="62.4979%" y="229" width="0.5311%" height="15" fill="rgb(235,201,11)" fg:x="133438" fg:w="1134"/><text x="62.7479%" y="239.50"></text></g><g><title>[[vdso]] (796 samples, 0.37%)</title><rect x="62.6562%" y="213" width="0.3728%" height="15" fill="rgb(207,46,11)" fg:x="133776" fg:w="796"/><text x="62.9062%" y="223.50"></text></g><g><title>_rjem_mallocx (62 samples, 0.03%)</title><rect x="63.0290%" y="245" width="0.0290%" height="15" fill="rgb(241,35,35)" fg:x="134572" fg:w="62"/><text x="63.2790%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (457 samples, 0.21%)</title><rect x="63.0581%" y="245" width="0.2140%" height="15" fill="rgb(243,32,47)" fg:x="134634" fg:w="457"/><text x="63.3081%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (103 samples, 0.05%)</title><rect x="63.2239%" y="229" width="0.0482%" height="15" fill="rgb(247,202,23)" fg:x="134988" fg:w="103"/><text x="63.4739%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;rune::runtime::value::Value&gt; (27 samples, 0.01%)</title><rect x="63.2721%" y="245" width="0.0126%" height="15" fill="rgb(219,102,11)" fg:x="135091" fg:w="27"/><text x="63.5221%" y="255.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (189 samples, 0.09%)</title><rect x="63.2847%" y="245" width="0.0885%" height="15" fill="rgb(243,110,44)" fg:x="135118" fg:w="189"/><text x="63.5347%" y="255.50"></text></g><g><title>rune::runtime::vm::Vm::set_entrypoint (9,577 samples, 4.49%)</title><rect x="63.3733%" y="245" width="4.4855%" height="15" fill="rgb(222,74,54)" fg:x="135307" fg:w="9577"/><text x="63.6233%" y="255.50">rune:..</text></g><g><title>start_thread (76,053 samples, 35.62%)</title><rect x="32.2859%" y="405" width="35.6207%" height="15" fill="rgb(216,99,12)" fg:x="68933" fg:w="76053"/><text x="32.5359%" y="415.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (76,053 samples, 35.62%)</title><rect x="32.2859%" y="389" width="35.6207%" height="15" fill="rgb(226,22,26)" fg:x="68933" fg:w="76053"/><text x="32.5359%" y="399.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (76,053 samples, 35.62%)</title><rect x="32.2859%" y="373" width="35.6207%" height="15" fill="rgb(217,163,10)" fg:x="68933" fg:w="76053"/><text x="32.5359%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (76,053 samples, 35.62%)</title><rect x="32.2859%" y="357" width="35.6207%" height="15" fill="rgb(213,25,53)" fg:x="68933" fg:w="76053"/><text x="32.5359%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::task::raw::poll (76,053 samples, 35.62%)</title><rect x="32.2859%" y="341" width="35.6207%" height="15" fill="rgb(252,105,26)" fg:x="68933" fg:w="76053"/><text x="32.5359%" y="351.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (76,053 samples, 35.62%)</title><rect x="32.2859%" y="325" width="35.6207%" height="15" fill="rgb(220,39,43)" fg:x="68933" fg:w="76053"/><text x="32.5359%" y="335.50">tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (76,053 samples, 35.62%)</title><rect x="32.2859%" y="309" width="35.6207%" height="15" fill="rgb(229,68,48)" fg:x="68933" fg:w="76053"/><text x="32.5359%" y="319.50">tokio::runtime::task::raw::poll</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (76,053 samples, 35.62%)</title><rect x="32.2859%" y="293" width="35.6207%" height="15" fill="rgb(252,8,32)" fg:x="68933" fg:w="76053"/><text x="32.5359%" y="303.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::futur..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (76,051 samples, 35.62%)</title><rect x="32.2868%" y="277" width="35.6197%" height="15" fill="rgb(223,20,43)" fg:x="68935" fg:w="76051"/><text x="32.5368%" y="287.50">futures_util::stream::stream::StreamExt::poll_next_unpin</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (76,051 samples, 35.62%)</title><rect x="32.2868%" y="261" width="35.6197%" height="15" fill="rgb(229,81,49)" fg:x="68935" fg:w="76051"/><text x="32.5368%" y="271.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::futur..</text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (102 samples, 0.05%)</title><rect x="67.8588%" y="245" width="0.0478%" height="15" fill="rgb(236,28,36)" fg:x="144884" fg:w="102"/><text x="68.1088%" y="255.50"></text></g><g><title>_rjem_mallocx (187 samples, 0.09%)</title><rect x="67.9071%" y="261" width="0.0876%" height="15" fill="rgb(249,185,26)" fg:x="144987" fg:w="187"/><text x="68.1571%" y="271.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (232 samples, 0.11%)</title><rect x="67.9071%" y="293" width="0.1087%" height="15" fill="rgb(249,174,33)" fg:x="144987" fg:w="232"/><text x="68.1571%" y="303.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (232 samples, 0.11%)</title><rect x="67.9071%" y="277" width="0.1087%" height="15" fill="rgb(233,201,37)" fg:x="144987" fg:w="232"/><text x="68.1571%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (45 samples, 0.02%)</title><rect x="67.9946%" y="261" width="0.0211%" height="15" fill="rgb(221,78,26)" fg:x="145174" fg:w="45"/><text x="68.2446%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (45 samples, 0.02%)</title><rect x="67.9946%" y="245" width="0.0211%" height="15" fill="rgb(250,127,30)" fg:x="145174" fg:w="45"/><text x="68.2446%" y="255.50"></text></g><g><title>_rjem_mallocx (45 samples, 0.02%)</title><rect x="67.9946%" y="229" width="0.0211%" height="15" fill="rgb(230,49,44)" fg:x="145174" fg:w="45"/><text x="68.2446%" y="239.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (234 samples, 0.11%)</title><rect x="67.9071%" y="405" width="0.1096%" height="15" fill="rgb(229,67,23)" fg:x="144987" fg:w="234"/><text x="68.1571%" y="415.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (234 samples, 0.11%)</title><rect x="67.9071%" y="389" width="0.1096%" height="15" fill="rgb(249,83,47)" fg:x="144987" fg:w="234"/><text x="68.1571%" y="399.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (234 samples, 0.11%)</title><rect x="67.9071%" y="373" width="0.1096%" height="15" fill="rgb(215,43,3)" fg:x="144987" fg:w="234"/><text x="68.1571%" y="383.50"></text></g><g><title>tokio::runtime::task::raw::poll (234 samples, 0.11%)</title><rect x="67.9071%" y="357" width="0.1096%" height="15" fill="rgb(238,154,13)" fg:x="144987" fg:w="234"/><text x="68.1571%" y="367.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (234 samples, 0.11%)</title><rect x="67.9071%" y="341" width="0.1096%" height="15" fill="rgb(219,56,2)" fg:x="144987" fg:w="234"/><text x="68.1571%" y="351.50"></text></g><g><title>tokio::runtime::task::raw::poll (234 samples, 0.11%)</title><rect x="67.9071%" y="325" width="0.1096%" height="15" fill="rgb(233,0,4)" fg:x="144987" fg:w="234"/><text x="68.1571%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (234 samples, 0.11%)</title><rect x="67.9071%" y="309" width="0.1096%" height="15" fill="rgb(235,30,7)" fg:x="144987" fg:w="234"/><text x="68.1571%" y="319.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (36 samples, 0.02%)</title><rect x="68.0185%" y="405" width="0.0169%" height="15" fill="rgb(250,79,13)" fg:x="145225" fg:w="36"/><text x="68.2685%" y="415.50"></text></g><g><title>tokio::runtime::task::raw::poll (36 samples, 0.02%)</title><rect x="68.0185%" y="389" width="0.0169%" height="15" fill="rgb(211,146,34)" fg:x="145225" fg:w="36"/><text x="68.2685%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (36 samples, 0.02%)</title><rect x="68.0185%" y="373" width="0.0169%" height="15" fill="rgb(228,22,38)" fg:x="145225" fg:w="36"/><text x="68.2685%" y="383.50"></text></g><g><title>tokio::runtime::task::raw::poll (36 samples, 0.02%)</title><rect x="68.0185%" y="357" width="0.0169%" height="15" fill="rgb(235,168,5)" fg:x="145225" fg:w="36"/><text x="68.2685%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (36 samples, 0.02%)</title><rect x="68.0185%" y="341" width="0.0169%" height="15" fill="rgb(221,155,16)" fg:x="145225" fg:w="36"/><text x="68.2685%" y="351.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (36 samples, 0.02%)</title><rect x="68.0185%" y="325" width="0.0169%" height="15" fill="rgb(215,215,53)" fg:x="145225" fg:w="36"/><text x="68.2685%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (36 samples, 0.02%)</title><rect x="68.0185%" y="309" width="0.0169%" height="15" fill="rgb(223,4,10)" fg:x="145225" fg:w="36"/><text x="68.2685%" y="319.50"></text></g><g><title>latte::workload::Program::convert_error (36 samples, 0.02%)</title><rect x="68.0185%" y="293" width="0.0169%" height="15" fill="rgb(234,103,6)" fg:x="145225" fg:w="36"/><text x="68.2685%" y="303.50"></text></g><g><title>&lt;rune::runtime::value::Value as core::clone::Clone&gt;::clone (134 samples, 0.06%)</title><rect x="98.9808%" y="293" width="0.0628%" height="15" fill="rgb(227,97,0)" fg:x="211332" fg:w="134"/><text x="99.2308%" y="303.50"></text></g><g><title>[unknown] (103 samples, 0.05%)</title><rect x="99.0436%" y="293" width="0.0482%" height="15" fill="rgb(234,150,53)" fg:x="211466" fg:w="103"/><text x="99.2936%" y="303.50"></text></g><g><title>[unknown] (66 samples, 0.03%)</title><rect x="99.0609%" y="277" width="0.0309%" height="15" fill="rgb(228,201,54)" fg:x="211503" fg:w="66"/><text x="99.3109%" y="287.50"></text></g><g><title>[unknown] (56 samples, 0.03%)</title><rect x="99.0656%" y="261" width="0.0262%" height="15" fill="rgb(222,22,37)" fg:x="211513" fg:w="56"/><text x="99.3156%" y="271.50"></text></g><g><title>[unknown] (54 samples, 0.03%)</title><rect x="99.0665%" y="245" width="0.0253%" height="15" fill="rgb(237,53,32)" fg:x="211515" fg:w="54"/><text x="99.3165%" y="255.50"></text></g><g><title>[unknown] (48 samples, 0.02%)</title><rect x="99.0694%" y="229" width="0.0225%" height="15" fill="rgb(233,25,53)" fg:x="211521" fg:w="48"/><text x="99.3194%" y="239.50"></text></g><g><title>[unknown] (43 samples, 0.02%)</title><rect x="99.0717%" y="213" width="0.0201%" height="15" fill="rgb(210,40,34)" fg:x="211526" fg:w="43"/><text x="99.3217%" y="223.50"></text></g><g><title>[unknown] (41 samples, 0.02%)</title><rect x="99.0726%" y="197" width="0.0192%" height="15" fill="rgb(241,220,44)" fg:x="211528" fg:w="41"/><text x="99.3226%" y="207.50"></text></g><g><title>[unknown] (39 samples, 0.02%)</title><rect x="99.0736%" y="181" width="0.0183%" height="15" fill="rgb(235,28,35)" fg:x="211530" fg:w="39"/><text x="99.3236%" y="191.50"></text></g><g><title>[unknown] (38 samples, 0.02%)</title><rect x="99.0740%" y="165" width="0.0178%" height="15" fill="rgb(210,56,17)" fg:x="211531" fg:w="38"/><text x="99.3240%" y="175.50"></text></g><g><title>[unknown] (31 samples, 0.01%)</title><rect x="99.0773%" y="149" width="0.0145%" height="15" fill="rgb(224,130,29)" fg:x="211538" fg:w="31"/><text x="99.3273%" y="159.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="99.0815%" y="133" width="0.0103%" height="15" fill="rgb(235,212,8)" fg:x="211547" fg:w="22"/><text x="99.3315%" y="143.50"></text></g><g><title>_rjem_sdallocx (285 samples, 0.13%)</title><rect x="99.0923%" y="293" width="0.1335%" height="15" fill="rgb(223,33,50)" fg:x="211570" fg:w="285"/><text x="99.3423%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;rune::runtime::value::Value&gt; (197 samples, 0.09%)</title><rect x="99.2258%" y="293" width="0.0923%" height="15" fill="rgb(219,149,13)" fg:x="211855" fg:w="197"/><text x="99.4758%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;rune::runtime::vm_error::VmErrorKind&gt; (52 samples, 0.02%)</title><rect x="99.3181%" y="293" width="0.0244%" height="15" fill="rgb(250,156,29)" fg:x="212052" fg:w="52"/><text x="99.5681%" y="303.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (66,942 samples, 31.35%)</title><rect x="68.0359%" y="373" width="31.3534%" height="15" fill="rgb(216,193,19)" fg:x="145262" fg:w="66942"/><text x="68.2859%" y="383.50">futures_util::stream::stream::StreamExt::poll_next_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (66,942 samples, 31.35%)</title><rect x="68.0359%" y="357" width="31.3534%" height="15" fill="rgb(216,135,14)" fg:x="145262" fg:w="66942"/><text x="68.2859%" y="367.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core..</text></g><g><title>&lt;rune::shared::assert_send::AssertSend&lt;T&gt; as core::future::future::Future&gt;::poll (66,942 samples, 31.35%)</title><rect x="68.0359%" y="341" width="31.3534%" height="15" fill="rgb(241,47,5)" fg:x="145262" fg:w="66942"/><text x="68.2859%" y="351.50">&lt;rune::shared::assert_send::AssertSend&lt;T&gt; as core::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (66,942 samples, 31.35%)</title><rect x="68.0359%" y="325" width="31.3534%" height="15" fill="rgb(233,42,35)" fg:x="145262" fg:w="66942"/><text x="68.2859%" y="335.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core..</text></g><g><title>rune::runtime::vm::Vm::run (66,942 samples, 31.35%)</title><rect x="68.0359%" y="309" width="31.3534%" height="15" fill="rgb(231,13,6)" fg:x="145262" fg:w="66942"/><text x="68.2859%" y="319.50">rune::runtime::vm::Vm::run</text></g><g><title>rune::runtime::budget::take (100 samples, 0.05%)</title><rect x="99.3424%" y="293" width="0.0468%" height="15" fill="rgb(207,181,40)" fg:x="212104" fg:w="100"/><text x="99.5924%" y="303.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (66,943 samples, 31.35%)</title><rect x="68.0359%" y="389" width="31.3539%" height="15" fill="rgb(254,173,49)" fg:x="145262" fg:w="66943"/><text x="68.2859%" y="399.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core..</text></g><g><title>tokio::runtime::task::raw::poll (66,953 samples, 31.36%)</title><rect x="68.0359%" y="405" width="31.3585%" height="15" fill="rgb(221,1,38)" fg:x="145262" fg:w="66953"/><text x="68.2859%" y="415.50">tokio::runtime::task::raw::poll</text></g><g><title>all (213,508 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="213508"/><text x="0.2500%" y="447.50"></text></g><g><title>tokio-runtime-w (213,245 samples, 99.88%)</title><rect x="0.1232%" y="421" width="99.8768%" height="15" fill="rgb(249,21,11)" fg:x="263" fg:w="213245"/><text x="0.3732%" y="431.50">tokio-runtime-w</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1,293 samples, 0.61%)</title><rect x="99.3944%" y="405" width="0.6056%" height="15" fill="rgb(222,201,40)" fg:x="212215" fg:w="1293"/><text x="99.6444%" y="415.50"></text></g><g><title>tokio::runtime::task::raw::poll (1,293 samples, 0.61%)</title><rect x="99.3944%" y="389" width="0.6056%" height="15" fill="rgb(235,61,29)" fg:x="212215" fg:w="1293"/><text x="99.6444%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,293 samples, 0.61%)</title><rect x="99.3944%" y="373" width="0.6056%" height="15" fill="rgb(219,207,3)" fg:x="212215" fg:w="1293"/><text x="99.6444%" y="383.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (1,293 samples, 0.61%)</title><rect x="99.3944%" y="357" width="0.6056%" height="15" fill="rgb(222,56,46)" fg:x="212215" fg:w="1293"/><text x="99.6444%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,293 samples, 0.61%)</title><rect x="99.3944%" y="341" width="0.6056%" height="15" fill="rgb(239,76,54)" fg:x="212215" fg:w="1293"/><text x="99.6444%" y="351.50"></text></g><g><title>&lt;rune::shared::assert_send::AssertSend&lt;T&gt; as core::future::future::Future&gt;::poll (1,293 samples, 0.61%)</title><rect x="99.3944%" y="325" width="0.6056%" height="15" fill="rgb(231,124,27)" fg:x="212215" fg:w="1293"/><text x="99.6444%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,293 samples, 0.61%)</title><rect x="99.3944%" y="309" width="0.6056%" height="15" fill="rgb(249,195,6)" fg:x="212215" fg:w="1293"/><text x="99.6444%" y="319.50"></text></g></svg></svg>